
version: "3.8"
volumes:
  mysql_data:

  build_folder:

services:

  mysqldb:
    build: ./backend/db
    container_name: mysqldb
    env_file:
      - "./backend/db/.env"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  backend:
    build:
      context: ./backend/django_back/
      dockerfile: Dockerfile

    command: >
      bash -c "python wait_mysql.py &&
               python manage.py makemigrations baseapp &&
               python manage.py migrate &&
               python manage.py makemigrations users &&
               python manage.py migrate &&
               python manage.py makemigrations musics &&
               python manage.py migrate &&
               python manage.py makemigrations themes &&
               python manage.py migrate && 
               python manage.py makemigrations capsules &&
               python manage.py migrate &&
               python manage.py makemigrations videos &&
               python manage.py migrate &&
               python manage.py makemigrations stories &&
               python manage.py migrate && 
               

               python manage.py runserver 0.0.0.0:8080"

    ports:
      - "8080:8080"
    volumes:
      - ./backend/django_back:/app
    depends_on:
      - mysqldb
      - celery_worker

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      - "5672:5672" # Default Port
      - "15672:15672" # For UI
    expose:
      - "15672"

  celery_worker:
    container_name: celery_worker
    build: ./backend/django_back
    volumes:
      - ./backend/django_back:/backend
    ports: [ ]
    depends_on:
      - rabbitmq
    environment:
      - C_FORCE_ROOT=true
    command: sh -c "python wait_mysql.py &&
      celery -A django_back worker --loglevel=info"

  # prometheus:
  #   image: prom/prometheus
  #   restart: always
  #   volumes:
  #     - ./backend/monitoring/prometheus:/etc/prometheus/
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9090:9090
  #   links:

  #     - alertmanager:alertmanager
  # node-exporter:
  #   image: prom/node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - --collector.filesystem.ignored-mount-points
  #     - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
  #   ports:
  #     - 9100:9100
  #   restart: always
  #   deploy:

  #     mode: global
  # alertmanager:
  #   image: prom/alertmanager
  #   restart: always
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./backend/monitoring/alertmanager/:/etc/alertmanager/
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'

  #     - '--storage.path=/alertmanager'
  # grafana:
  #   image: grafana/grafana
  #   user: '472'
  #   restart: always
  #   environment:
  #     GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./backend/monitoring/grafana/provisioning/:/etc/grafana/provisioning/
  #   env_file:
  #     - ./backend/monitoring/grafana/config.monitoring
  #   ports:
  #     - 3001:3000
  #   depends_on:

  #     - prometheus

#  nginx:
#    build: ./nginx
#    ports:
#      - "80:80"
#    volumes:
#      - build_folder:/var/www/frontend
#    depends_on:
#      - backend
#      - client
#
#  client:
#    container_name: client
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    volumes:
#      - ./frontend/:/frontend
#      - build_folder:/frontend/build
#    tty: true
#
#  swagger-ui:
#    image: swaggerapi/swagger-ui
#    container_name: swagger_ui_container
#    ports:
#      - "80:8080"
#    volumes:
#      - ./doc:/usr/share/nginx/html/doc
#    environment:
#      API_URL: doc/openapi.yaml
