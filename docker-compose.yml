version: "3.8"

volumes:
  mysql_data:
  build_folder:

services:
  mysqldb:
    build: ./backend/db
    container_name: mysqldb
    env_file:
      - "./backend/db/.env"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init/:/docker-entrypoint-initdb.d/
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysqldb"]
      timeout: 20s
      retries: 10

  backend:
    build:
      context: ./backend/django_back/
      dockerfile: Dockerfile

    command: >
      bash -c "python wait_mysql.py &&
               python manage.py makemigrations baseapp &&
               python manage.py migrate &&
               python manage.py makemigrations users &&
               python manage.py migrate &&
               python manage.py makemigrations musics &&
               python manage.py migrate &&
               python manage.py makemigrations themes &&
               python manage.py migrate &&
               python manage.py makemigrations capsules &&
               python manage.py migrate &&
               python manage.py makemigrations videos &&
               python manage.py migrate &&
               python manage.py makemigrations stories &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8080"

    ports:
      - "8080:8080"
    volumes:
      - ./backend/django_back:/app
    depends_on:
      mysqldb:
        condition: service_healthy

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - TZ=Asia/Seoul
    ports:
      - "5672:5672" # Default Port
      - "15672:15672" # For UI
    expose:
      - "15672"
    volumes:
      - "./backend/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 15s
      retries: 10

  celery_worker:
    container_name: celery_worker
    build: ./backend/django_back/
    volumes:
      - ./backend/django_back:/backend
    ports: []
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - C_FORCE_ROOT=true
      - TZ=Asia/Seoul
      - broker_connection_retry_on_startup=true
    command: sh -c "python wait_mysql.py &&
      celery -A django_back worker --loglevel=info"

  #  celery_beat:
  #   container_name: celery_beat
  #   build: ./backend/django_back/
  #   volumes:
  #     - ./backend/django_back:/backend
  #   ports: [ ]
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   environment:
  #     - C_FORCE_ROOT=true
  #     - TZ=Asia/Seoul
  #   command: sh -c "python wait_mysql.py &&
  #     celery -A django_back beat --loglevel=info"

  redis_container:
    image: redis:latest
    container_name: redis
    environment:
      - TZ=Asia/Seoul
    ports:
      - "6379:6379"
    volumes:
      - ./backend/redis/data:/data
      - ./backend/redis/conf/redis.conf:/usr/local/conf/redis.conf
    depends_on:
      - celery_worker
      - backend
    # 컨테이너에 docker label을 이용해서 메타데이터 추가
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    command: redis-server /usr/local/conf/redis.conf

  # prometheus: # 프로메테우스 서비스 추가
  #   image: prom/prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./backend/monitoring/prometheus:/etc/prometheus
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"

  flower:
    image: mher/flower
    container_name: flower
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TZ=Asia/Seoul
    ports:
      - "5555:5555"
    depends_on:
      rabbitmq:
        condition: service_healthy
      celery_worker:
        condition: service_started

  #   grafana: # 그라파나 서비스 추가
  #     image: grafana/grafana
  #     ports:
  #       - "3000:3000"
  #     volumes:
  #       - ./backend/monitoring/grafana:/etc/grafana/provisioning/
  #     depends_on:
  #       - prometheus
  # #      - cadvisor
  #       - node-exporter

  #  cadvisor:
  #    image: gcr.io/cadvisor/cadvisor:v0.47.0
  #    container_name: cadvisor
  #    privileged: true
  #    ports:
  #      - "9600:8080"
  #    volumes:
  #      - /:/rootfs:ro
  #      - /var/run:/var/run:rw
  #      - /sys:/sys:ro
  #      - /var/lib/docker/:/var/lib/docker:ro
  #      - /proc/cpuinfo:/host/proc/cpuinfo:ro
  #      - /dev/disk:/dev/disk/:ro
  #    devices:
  #      - /dev/kmsg:/dev/kmsg

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   ports:
  #     - "9100:9100"

  gunicorn:
    image: gunicorn:latest
    build:
      context: ./backend/django_back/
      dockerfile: Dockerfile
    container_name: gunicorn
    command: gunicorn django_back.wsgi:application -b 0.0.0.0:8000 --access-logfile -
    ports:
      - "8000:8000"
    volumes:
      - ./backend/django_back:/app
    depends_on:
      - mysqldb
      - celery_worker

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend

  #  alertmanager:
  #    image: prom/alertmanager
  #    volumes:
  #      - ./backend/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #      - ./backend/monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml # 이 줄 추가
  #    command:
  #      - '--config.file=/etc/alertmanager/alertmanager.yml'
  #    ports:
  #      - 9093:9093

  #  influxdb:
  #    image: influxdb:1.8
  #    ports:
  #      - "8086:8086"
  #    environment:
  #      - INFLUXDB_DB=k6

  #  k6:
  #    image: grafana/k6:latest
  #    platform: linux/amd64
  #    ports:
  #      - "6565:6565"
  #    environment:
  #      - K6_OUT=influxdb=http://influxdb:8086/k6
  #    volumes:
  #      - ./backend/monitoring/samples:/scripts
  #    command: run /scripts/main.js

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: ["npm", "run", "dev"]
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    ports:
      - "5173:5173"
    tty: true
