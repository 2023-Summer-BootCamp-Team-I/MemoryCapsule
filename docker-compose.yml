
version: "3.8"
volumes:
  mysql_data:

  build_folder:


services:

  mysqldb:
    build: ./backend/db
    container_name: mysqldb
    env_file:
      - "./backend/db/.env"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
     # - "./init/:/docker-entrypoint-initdb.d/"


  backend:
    build:
      context: ./backend/django_back/
      dockerfile: Dockerfile

    command: >
      bash -c "python wait_mysql.py &&
               python manage.py makemigrations baseapp &&
               python manage.py migrate &&
               python manage.py makemigrations users &&
               python manage.py migrate &&
               python manage.py makemigrations musics &&
               python manage.py migrate &&
               python manage.py makemigrations themes &&
               python manage.py migrate &&
               python manage.py makemigrations capsules &&
               python manage.py migrate &&
               python manage.py makemigrations videos &&
               python manage.py migrate &&
               python manage.py makemigrations stories &&
               python manage.py migrate &&


               python manage.py runserver 0.0.0.0:8080"

    ports:
      - "8080:8080"
    volumes:
      - ./backend/django_back:/app
    depends_on:
      - mysqldb
      - celery_worker

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - TZ=Asia/Seoul
    ports:
      - "5672:5672" # Default Port
      - "15672:15672" # For UI
    expose:
      - "15672"

  celery_worker:
    container_name: celery_worker
    build: ./backend/django_back/
    volumes:
      - ./backend/django_back:/backend
    ports: [ ]
    depends_on:
      - rabbitmq
    environment:
      - C_FORCE_ROOT=true
      - TZ=Asia/Seoul
    command: sh -c "python wait_mysql.py &&
      celery -A django_back worker --loglevel=info"

  celery_beat:
   container_name: celery_beat
   build: ./backend/django_back/
   volumes:
     - ./backend/django_back:/backend
   ports: [ ]
   depends_on:
     - rabbitmq
     - celery_worker
   environment:
     - C_FORCE_ROOT=true
     - TZ=Asia/Seoul
   command: sh -c "python wait_mysql.py &&
     celery -A django_back beat --loglevel=info"

  redis_container:
    # 사용할 이미지
    image: redis:latest
    # 컨테이너명
    container_name: redis
    # 접근 포트 설정(컨테이너 외부:컨테이너 내부)
    ports:
      - 6379:6379
    # 스토리지 마운트(볼륨) 설정
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    # 컨테이너에 docker label을 이용해서 메타데이터 추가
    labels:
      - "name=redis"
      - "mode=standalone"
    # 컨테이너 종료시 재시작 여부 설정
    restart: always
    command: redis-server /usr/local/conf/redis.conf
    
  prometheus: # 프로메테우스 서비스 추가
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana: # 그라파나 서비스 추가
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - cadvisor
      - node-exporter

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    privileged: true
    ports:
      - 9600:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /proc/cpuinfo:/host/proc/cpuinfo:ro
      - /dev/disk:/dev/disk/:ro
    devices:
      - /dev/kmsg:/dev/kmsg

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - 9100:9100

  gunicorn:
    build:
      context: ./backend/django_back/
      dockerfile: Dockerfile
    container_name: gunicorn
    command: gunicorn django_back.wsgi:application -b 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend/django_back:/app
    depends_on:
      - mysqldb
      - celery_worker

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
